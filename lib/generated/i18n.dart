import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:funwithml/utils/constant.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S? current;

  static const GeneratedLocalizationsDelegate? delegate =
      GeneratedLocalizationsDelegate();

  static S? of(BuildContext context) => Localizations.of<S?>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get appName => "PowerPay";
  String get email => "Email";

  String get enterEmail => "Enter Email";

  String get password => "Password";
  String get confirmPassword => "Confirm Password";

  String get address => "Street Addrress";
  String get enterAddress => "Enter Addrress";
  String get enterStreetAddress => "Enter Street Addrress";

  String get phone => "Phone";
  String get enterPhone => "Enter Phone";

  String get enterPassword => "Enter Password";

  String get enterValidEmail => "Please enter valid email";

  String get enterfullName => "Please enter Full name";

  String get enterPhoneNumber => "Please Phone Number";

  String get forgotPassword => "Forgot Password";

  String get please => "Please ";

  String get fullName => 'Full name';

  String get postalCode => "Postal code";

  String get postalAddress => "Postal Address";

  String get forgotPasswordSuccessFully =>
      'The reset password link has been successfully sent to your email.';

  String get login => "Login";

  String get signIn => "Sign In";

  String get signUp => "Sign Up";

  String get register => "Register";

  String get opps => "Opps something went wrong";

  String get loginSuccess => "Login successfully!!";

  String get registerSuccess => "Register successfully!!";

  String get noInternet => "No Internet available";
  String get getStarted => "GET STARTED";
  String get managePower => "Manage Your \nPower Consumption";
  String get effectiveApproach => "With smart and effective approach";
  String get home => "Home";
  String get notification => "Notifiacation";
  String get session => "Sessions";
  String get profile => "Profile";
  String get forgotYourPassword => "Forgot your password?";
  String get confimEmail =>
      "Confirm your email and we'll send\nthe instructions.";
  String get submit => "Submit";
  String get history => "History";
  String get paymentMethod => "Payment methods";
  String get settings => "Settings";
  String get scanQRCode => "Scan Qr code";
  String get cancel => "Cancel";
  String get outletInfo => "Outlet info";
  String get productInfo => "Product info";
  String get outletNumber => "Outlet number:";
  String get status => "Status:";
  String get maxPower => "Max power:";
  String get next => "Next";
  String get available => "Available";
  String get notAvailable => "Unavailable";
  String get sessionSetting => "Session Settings";
  String get paymentDetails => "Payment Details";
  String get selectMaxAmount => "Select max amount:";
  String get setTime => "Set Time:";
  String get other => "other:";
  String get start => "Start";
  String get stop => "Stop";
  String get edit => "Edit";
  String get editProfile => "Edit Profile";
  String get save => "Save";
  String get camera => "Camera";
  String get gallery => "Gallery";
  String get name => "Name";
  String get payMethod => "Customize your payment method";
  String get cardCash => "Cash/Card on delivery";
  String get deleteCard => "Delete Card";
  String get addCard => "Add another Payment Method";
  String get addNewCard => "Add new card";
  String get cardNo => "Card number";
  String get expries => "Expires";
  String get cvc => "CVC";
  String get country => "Country";
  String get city => "City";
  String get apply => "Apply";
  String get pay => "Pay";
  String get sessionList => "Session list";
  String get logout => "Log Out";
  String get aboutUs => "About Us";
  String get privacyPolicy => "Privacy policy";
  String get terms => "Privacy & terms";
  String get paymentReceipt => "Payment Receipt";
  String get receipt => "Receipt";
  String get productName => "Product name: ";
  String get date => "Date: ";
  String get orderId => "Order ID: ";
  String get price => "Price: ";
  String get thankYouForPurchasing => "Thank you for purchasing from us";
  String get downloadReceipt => "Download receipt";
  String get exit => "Exit";
  String get energyConsumed => "Energy Consumed";
  String get timer => "Timer";
  String get moneyLeft => "Money Left";
  String get paymentType => "Payment Type";
  String get creditCard => "Credit Card";
  String get googlePay => "Google Pay";
  String get vipps => "Vipps";
  String get endSessionSuccess => "End Session Successfully";
  String get cardHolderNameHint => "John DEO";
  String get enterCardHolderName => "Enter card holder name";
  String get invalidCard => "Invalid card";
  String get enterCvv => "Enter cvv";
  String get invalidCvv => "Invalid expiry date";
  String get invoiceId => "Invoice Id";
  String get dateHint => "MM/YY";
  String get addCardSuccess => "Add Card Successfully";
  String get failedCurrentCard => "Failed to load current Card details";
  String get hours => " h";
  String get extendSuccess => "Extended Successfully";
  String get nok => "NOK";
  String get now => "now";
  String get secAgo => " s ago";
  String get minAgo => " m ago";
  String get hoursAgo => " h ago";
  String get daysAgo => " d ago";
  String get weekAgo => " week ago";
  String get weeksAgo => " weeks ago";
  String get watt => " kW";
  String get fileDSuccess => "File Downloaded Successfully";
  String get failedErr => "Failed with error:";
  String get passwordNotMatch =>
      "Your Password and Confirm Password does not match!";
  String get pressHereToScreen => "Press here to scan QR code";
  String get updateSuccessfully => "Your details updated successfully";
  String get deleteAccount => "Delete account";
  String get confirm => "Confirm";
  String get ack => "ACK";
  String get faddress => "Address";
  String get orgNo => "Organization number";
  String get mva => "MVA";
  String get website => "Website";
  String get femail => "E-mail";
  String get consumedPeriod => "Consumed period";
  String get consumedenergy => "Consumed energy";
  String get receiptSent => "Receipt has been sent to";
  String get yourdownloadReceipt =>
      "Downloaded inside download directory in your device";
  String get sendEmail => "Send Email";
  String get sessionEndSuccess => "Session Ended successfully";

  String get changeLan => "Change Language";
}

class $no extends S {
  $no();

  String get appName => "PowerPay";
  String get email => "E-post";

  String get enterEmail => " Skriv inn e-post";

  String get password => "Passord";
  String get confirmPassword => "Bekreft passord";

  String get address => "Gateadresse";
  String get enterAddress => "Skriv inn adresse";
  String get enterStreetAddress => "Skriv inn gateadresse";

  String get phone => "Telefonnummer";
  String get enterPhone => "Skriv inn telefonnummer";

  String get enterPassword => "Skriv inn passord";

  String get enterValidEmail => " Vennligst skriv inn gyldig e-postadresse ";

  String get enterfullName => " Vennligst skriv inn fullt navn";

  String get enterPhoneNumber => " Vennligst skriv inn telefonnummer";

  String get forgotPassword => "Glemt passord";

  String get please => "Vennligst";

  String get fullName => 'Fullt navn';

  String get postalCode => "Postnummer";

  String get postalAddress => "Postadresse";

  String get forgotPasswordSuccessFully =>
      'En lenke for tilbakestilling av passordet har blitt sendt til e-posten din.';

  String get login => "Logg inn";

  String get signIn => "Logg inn";

  String get signUp => "Registrer deg";

  String get register => "Registrer";

  String get opps => "Opps noe gikk galt";

  String get loginSuccess => " Logg inn var vellykket!!";

  String get registerSuccess => "Registreringen var vellykket!!";

  String get noInternet => "Ingen internett-tilkobling tilgjengelig";
  String get getStarted => "KOM I GANG";

  String get managePower => "Administrer \nStr\u00F8mforbruket ditt";
  String get effectiveApproach => " Med smart og effektiv tilnærming";
  String get home => "Hjem";
  String get notification => "Varsel";
  String get session => "Økter";
  String get profile => "Profil";
  String get forgotYourPassword => "Glemt passordet?";
  String get confimEmail =>
      " Bekreft e-postadressen din, så sender vi \ninstruksjonene. ";
  String get submit => "Send inn";
  String get history => " Historie";
  String get paymentMethod => " Betalingsmetoder";
  String get settings => " Innstillinger";
  String get scanQRCode => "Skann QR kode";
  String get cancel => "Avbryt";
  String get outletInfo => "Stikkontakt info";
  String get productInfo => "Produkt info";
  String get outletNumber => "Stikkontakt nummer:";
  String get status => "Status:";
  String get maxPower => "Maks effekt:";
  String get next => "Neste";
  String get available => "Tilgjengelig";
  String get notAvailable => "Utilgjengelig";
  String get sessionSetting => " Sesjonsinnstillinger";
  String get paymentDetails => "Betalingsdetaljer";
  String get selectMaxAmount => "Velg maks beløp:";
  String get setTime => "Still inn tid:";
  String get other => "andre:";
  String get start => "Start";
  String get stop => "Stopp";
  String get edit => "Endre";
  String get editProfile => "Rediger profil";
  String get save => "Lagre";
  String get camera => "Kamera";
  String get gallery => "Galleri";
  String get name => "Navn";
  String get payMethod => "Tilpass din betalingsmetode";
  String get cardCash => "Kontanter/Kort ved levering";
  String get deleteCard => "Slett kort";
  String get addCard => "Legg til ett nytt betalingskort";
  String get addNewCard => "Legg til et nytt kort";
  String get cardNo => "Kortnummer";
  String get expries => "Utløper";
  String get cvc => "CVC";
  String get country => "Land";
  String get city => "By";
  String get apply => "Bruk";
  String get pay => "Betale";
  String get sessionList => "Sessions liste";
  String get logout => "Logg ut";
  String get aboutUs => "Om oss";
  String get privacyPolicy => " Personvernregler";
  String get terms => " Personvern og vilkår";
  String get paymentReceipt => "Kvittering";
  String get productName => "Produkt navn: ";
  String get date => "Dato: ";
  String get orderId => "Ordre ID: ";
  String get price => "Pris: ";
  String get thankYouForPurchasing => " Takk for at du kjøpte fra oss";
  String get downloadReceipt => "Last ned kvittering";
  String get exit => "Exit";
  String get energyConsumed => "Energiforbruk";
  String get timer => "Timer";
  String get moneyLeft => "Gjenstående beløp";
  String get paymentType => "Betalingsmetode";
  String get creditCard => "Kredittkort";
  String get googlePay => "Google Pay";
  String get vipps => "Vipps";
  String get endSessionSuccess => " Avslutt økt vellykket";
  String get cardHolderNameHint => "John DEO";
  String get enterCardHolderName => " Angi kortholderens navn";
  String get invalidCard => "Ugyldig kort";
  String get enterCvv => "Skriv inn cvv";
  String get invalidCvv => "Ugyldig utløpsdato ";
  String get dateHint => "MM/YY";
  String get addCardSuccess => "Kortet ble lagt til";
  String get failedCurrentCard =>
      " Kunne ikke laste inn gjeldende kortdetaljer";
  String get hours => " h";
  String get extendSuccess => " Utvidelsen var vellykket";
  String get nok => "NOK";
  String get now => "nå";
  String get secAgo => " s siden";
  String get minAgo => " m siden";
  String get hoursAgo => " t siden";
  String get daysAgo => " d siden";
  String get weekAgo => " uke siden";
  String get weeksAgo => " uker siden";
  String get watt => " kW";
  String get fileDSuccess => "Filen ble vellykket lastet ned ";
  String get failedErr => " Mislyktes med feil:";
  String get passwordNotMatch =>
      "Passordet ditt og Bekreft passord stemmer ikke overens!";
  String get pressHereToScreen => "Trykk her for å scanne QR-koden";
  String get updateSuccessfully => "Opplysningene dine er oppdatert";
  String get deleteAccount => "Slett konto";
  String get confirm => "Bekrefte";
  String get ack => "ACK";
  String get faddress => " Adresse ";
  String get orgNo => "Organisasjonsnummer";
  String get mva => "MVA";
  String get website => " Nettsted";
  String get femail => "E-post";
  String get consumedPeriod => "Forbruk periode";
  String get consumedenergy => "Forbruket energi";
  String get receiptSent => " Kvittering er sendt til ";
  String get yourdownloadReceipt =>
      "Lastet ned til nedlastingskatalogen på enheten din";
  String get sendEmail => "Send e-post";
  String get invoiceId => "Faktura -ID";
  String get receipt => "Kvittering";
  String get sessionEndSuccess => "Økten ble avsluttet";

  String get changeLan => "Skifte språk";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale(AppConstants.LANGUAGE_ENGLISH, ""),
      Locale(AppConstants.LANGUAGE_NORWEGIAN, ""),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale? fallback, bool withCountry = true}) {
    return (List<Locale>? locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback!, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale? fallback, bool withCountry = true}) {
    return (Locale? locale, Iterable<Locale> supported) {
      return _resolve(locale!, fallback!, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String? lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case AppConstants.LANGUAGE_ENGLISH:
          S.current = const $en();
          return SynchronousFuture<S>(S.current!);
        case AppConstants.LANGUAGE_NORWEGIAN:
          S.current = $no();
          return SynchronousFuture<S>(S.current!);
        default:
// NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current!);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale? fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
// Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

// If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

// If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode!.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String? getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode!.isEmpty
        ? l.languageCode
        : l.toString();
